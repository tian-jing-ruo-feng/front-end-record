(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{347:function(t,e,a){"use strict";a.r(e);var r=a(17),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"框架和库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架和库"}},[t._v("#")]),t._v(" 框架和库")]),t._v(" "),e("h2",{attrs:{id:"vue-相关问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-相关问题"}},[t._v("#")]),t._v(" Vue 相关问题")]),t._v(" "),e("ol",[e("li",[e("strong",[e("em",[t._v("Vue 的生命周期钩子函数有哪些？")])])])]),t._v(" "),e("p",[t._v("Vue 的生命周期钩子函数包括：beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed 等。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[e("em",[t._v("什么是 Vuex？")])])])]),t._v(" "),e("p",[t._v("Vuex 是 Vue.js 的状态管理模式，主要用于管理和维护应用中的全局状态。它包括 State（状态）、Getters（计算属性）、Mutations（同步修改状态）和 Actions（异步操作）。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[e("em",[t._v("如何在 Vue 中实现组件通信？")])])])]),t._v(" "),e("p",[t._v("可以使用 props 和 events 进行父子组件通信，使用 Vuex 进行跨组件通信，或者通过提供与注入（provide/inject）进行祖先与后代组件通信。")]),t._v(" "),e("h2",{attrs:{id:"react-相关问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-相关问题"}},[t._v("#")]),t._v(" React 相关问题")]),t._v(" "),e("ol",[e("li",[e("strong",[e("em",[t._v("React 的生命周期方法有哪些？")])])])]),t._v(" "),e("p",[t._v("React 组件的生命周期方法包括：componentDidMount、componentDidUpdate、componentWillUnmount 等。随着 Hooks 的引入，使用 useEffect 可以替代这些生命周期方法。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[e("em",[t._v("什么是 React Hooks？")])])])]),t._v(" "),e("p",[t._v("Hooks 是 React 16.8 引入的一种新特性，它允许在函数组件中使用状态和其他 React 特性。常用的 Hooks 有 useState、useEffect、useContext 等。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[e("em",[t._v("如何在 React 中管理状态")])])])]),t._v(" "),e("p",[t._v("可以使用 React 的内置状态管理（如 useState 和 useReducer），也可以使用第三方状态管理库（如 Redux 或 MobX）。")]),t._v(" "),e("h2",{attrs:{id:"angular-相关问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#angular-相关问题"}},[t._v("#")]),t._v(" Angular 相关问题")]),t._v(" "),e("ol",[e("li",[e("strong",[e("em",[t._v("Angular 的模块系统是怎样的？")])])])]),t._v(" "),e("p",[t._v("Angular 使用 NgModules 组织应用，每个 NgModule 是一个容器，用于存储组件、指令、管道和服务。根模块通常是 AppModule。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[e("em",[t._v("Angular 的依赖注入（DI）是如何工作的？")])])])]),t._v(" "),e("p",[t._v("Angular 的 DI 系统允许你在组件和服务中注入依赖对象。通过在构造函数中声明依赖项，Angular 会自动创建实例并注入。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[e("em",[t._v("什么是 Angular 装饰器？")])])])]),t._v(" "),e("p",[t._v("装饰器是用于标记类及其成员的特殊类型的声明。常用的装饰器有 @Component、@NgModule、@Injectable 等。")]),t._v(" "),e("h2",{attrs:{id:"一般性问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一般性问题"}},[t._v("#")]),t._v(" 一般性问题")]),t._v(" "),e("ol",[e("li",[e("strong",[e("em",[t._v("如何选择前端框架/库？")])])])]),t._v(" "),e("p",[t._v("考虑项目需求、团队熟悉度、社区支持、性能、扩展性等因素。可以对比 React、Vue、Angular 的优缺点，选择最适合的。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[e("em",[t._v("前端框架的优缺点是什么？")])])])]),t._v(" "),e("p",[t._v("React: 灵活、高性能、强大的社区支持，但需要更多的配置和手动管理状态。\nVue: 简单易上手、良好的文档和生态系统，但在大型项目中可能会遇到性能瓶颈。\nAngular: 完整的一体化框架、强大的工具和 CLI 支持，但学习曲线较陡。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[e("em",[t._v("你是否有使用过其他前端库，比如 jQuery、Bootstrap 等？")])])])]),t._v(" "),e("p",[t._v("jQuery: 主要用于 DOM 操作和简化 AJAX 请求，但现代框架已经减少了对 jQuery 的依赖。\nBootstrap: 用于快速构建响应式布局，提供了丰富的 UI 组件，但可能会导致样式冲突。")])])}),[],!1,null,null,null);e.default=s.exports}}]);